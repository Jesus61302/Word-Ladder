/* WORD LADDER Main.java
 * EE422C Project 3 submission by
 * Replace <...> with your actual data.
 * <Student1 Name>
 * <Student1 EID>
 * <Student1 5-digit Unique No.>
 * <Student2 Name>
 * <Student2 EID>
 * <Student2 5-digit Unique No.>
 * Slip days used: <0>
 * Git URL:
 * Spring 2022
 */


package assignment3;
import java.util.*;
import java.io.*;

public class Main {
	
	static Boolean quit;
	static Set<String> dict;
	
	public static void main(String[] args) throws Exception {
		
		Scanner kb;	// input Scanner for commands
		PrintStream ps;	// output file, for student testing and grading only
		// If arguments are specified, read/write from/to files instead of Std IO.
		if (args.length != 0) {
			kb = new Scanner(new File(args[0]));
			ps = new PrintStream(new File(args[1]));
			System.setOut(ps);			// redirect output to ps
		} else {
			kb = new Scanner(System.in);// default input from Stdin
			ps = System.out;			// default output to Stdout
		}
		initialize();
		// test parse


		while(!Main.quit){
			ArrayList<String> input = Main.parse(kb);
			System.out.println(input);
			if (input == null){
				Main.quit = true;
				continue;
			}
			ArrayList<String> BFSLadder = getWordLadderBFS(input.get(0) , input.get(1));
			System.out.println(BFSLadder.toString());
			printLadder(BFSLadder);

		}







	}
	
	public static void initialize() {

		// initialize your static variables or constants here.
		// We will call this method before running our JUNIT tests.  So call it 
		// only once at the start of main.
		dict = makeDictionary();
		quit = false;
	}
	
	/**
	 * @param keyboard Scanner connected to System.in
	 * @return ArrayList of Strings containing start word and end word. 
	 * If command is /quit, return null. 
	 */
	public static ArrayList<String> parse(Scanner keyboard) {
		// initializes variables that will be used in loop
		Boolean isValid = false;
		ArrayList<String> input2 = new ArrayList<>();
		List<String> input = new ArrayList<>(); //creates array list that will be used to store input words
		String inString;
		String [] arr;

		// loop that continues to ask for inputs until valid submission
		while(!isValid){
			System.out.println("Input two Words to generate word ladder: ");
			inString = keyboard.nextLine().toLowerCase(); // stores input as a string
			arr = inString.split(" ");
			input = Arrays.asList(arr); // changes the  array of input strings into a list;
			input2.addAll(input);
			input2.removeIf(el -> el.equals("")); //removes all empty elements(for when more than one space is entered during input)
			isValid = true;
		 	if (input2.contains("/QUIT")) { // checks if user input was /quit
				return null;
			}
			if (input2.size() != 2) { //makes sure only two words were inputted
				isValid = false;
				System.out.println("Invalid entry");

			}
		}

		return input2;
	}
	
	public static ArrayList<String> getWordLadderDFS(String start, String end) {
		
		// Returned list should be ordered start to end.  Include start and end.
		// If ladder is empty, return list with just start and end.
		// TODO some code
		
		return null; // replace this line later with real return
	}
	
    public static ArrayList<String> getWordLadderBFS(String start, String end) {

		//makes sure start and end are uppercase since dictionary is in all caps
		start = start.toUpperCase();
		end = end.toUpperCase();

		//initializing variables that will be used for function
		Map<String, String> visited = new HashMap<>(); // keeps track of Words we have already visited and there parent
		Queue<String> traversal = new LinkedList<>(); // Queue used to perform BFS
		ArrayList<String> ladder = new ArrayList<>(); // ladder that we will return
		ArrayList<String> words = new ArrayList<>(); //used to store list of words generated by differenceOfOneList()
		String current = start; //Current String we are looking at


		traversal.add(start);
		visited.put(current,null);
		while(!traversal.isEmpty()){
			current = traversal.remove();
			if (end.equals(current)){
				return backtrack(visited, end,start);
			}
			words = differByOneList(current);
			for(int i = 0; i < words.size(); i++){
				if(!visited.containsKey(words.get(i))){
					traversal.add(words.get(i));
					visited.put(words.get(i) , current);
				}
			}


		}
		ladder.add(start.toLowerCase());
		ladder.add(end.toLowerCase());
		return ladder;
	}
    
	
	public static void printLadder(ArrayList<String> ladder) {
		if(ladder.size() == 2){
			System.out.println("no word ladder can be found between " + ladder.get(0).toLowerCase() + " and " + ladder.get(1).toLowerCase() + ".");
		}
		else{
			System.out.println("a " + (ladder.size() - 2) + "-rung word ladder exists between " + ladder.get(0).toLowerCase() + " and " + ladder.get(ladder.size() - 1).toLowerCase() + ".");
			for(int i = 0; i < ladder.size(); i++){
				System.out.println(ladder.get(i).toLowerCase());
			}
		}
	}


	//Returns true if the word only differs by one letter
//	private static Boolean differsByOne(String one, String two){
//		int differences = 0;
//		for(int i = 0; i < one.length(); i++){
//			if(one.charAt(i) != two.charAt(i)){
//				differences++;
//			}
//		}if(differences == 1){
//			return true;
//		}
//		return false;
//	}

	//creates and returns a list of words that differ by only one letter to the given word
	public static ArrayList<String> differByOneList(String word){
		ArrayList<String> differList = new ArrayList<>();
		Set<String> added = new HashSet<>();
		added.add(word);
		char[] temp = word.toCharArray();
		String temp2 = word;
		char[] alphabet = new char[]{'A','B','C','D','E','F','G','H','I','J','k','L','M','N',+
				'O','P','Q','R','S','T','U','V','W','X','Y','Z'};

		for(int i = 0; i < temp.length; i++){
			temp = word.toCharArray();
			for(int j = 0; j < alphabet.length; j++){
				temp[i] = alphabet[j];
				temp2 = String.valueOf(temp);
				if(dict.contains(temp2) & !added.contains(temp2)){
					differList.add(temp2);
					added.add(temp2);

				}
			}
		}

		return differList;
	}

	//Supporter method for BFS that backtracks to get the path utilizing key value pairs of words and there parents

	private static ArrayList<String> backtrack(Map<String,String> parents, String start , String end){
		ArrayList<String> ladder = new ArrayList<>();
		Stack<String> stk = new Stack<>(); // stack needed since order will be reversed. can pop into arraylist at the end
		String parent = parents.get(start);
		stk.add(start);
		while(parent != null){
			stk.add(parent);
			parent = parents.get(parent);
		}
		while(!stk.empty()){
			ladder.add(stk.pop().toLowerCase());
		}
		return ladder;
	}



	/* Do not modify makeDictionary */
	public static Set<String>  makeDictionary () {
		Set<String> words = new HashSet<String>();
		Scanner infile = null;
		try {
			infile = new Scanner (new File("src/assignment3/five_letter_words.txt")); //delete SRC when testing on Linux
		} catch (FileNotFoundException e) {
			System.out.println("Dictionary File not Found!");
			e.printStackTrace();
			System.exit(1);
		}
		while (infile.hasNext()) {
			words.add(infile.next().toUpperCase());
		}
		return words;
	}
}
